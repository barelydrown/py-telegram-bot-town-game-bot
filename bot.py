import os
import random
import datetime

import telebot
from telebot import types

import game_logic as g
from config import TOKEN

errors = g.errors
bot = telebot.TeleBot(TOKEN, parse_mode=None)


@bot.message_handler(commands=['start'])
def start(message):
    """–°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –í—ã–≤–æ–¥–∏—Ç –Ω–∞ —ç–∫—Ä–∞–Ω –∫–Ω–æ–ø–∫–∏ —Ä–µ–∂–∏–º–æ–≤ –∏–≥—Ä—ã"""
    tg_id = message.chat.id
    if not os.path.isdir(f'users/{tg_id}'):
        os.mkdir(f'users/{tg_id}')

        with open(f'users/{tg_id}/bio.txt', 'w') as bio:
            first_name = message.chat.first_name
            last_name = message.chat.last_name
            username = message.chat.username
            reg_time = datetime.datetime.today().strftime('%Y-%m-%d %H:%M:%S')
            bio.write(f'[{first_name} {last_name} ({username}, {tg_id})] '
                      f'{reg_time}')

    bot.send_message(tg_id, g.start_message.format(message.chat.first_name),
                     parse_mode='Markdown', reply_markup=new_game_markup())


@bot.message_handler(commands=['new'])
def new_game(message):
    tg_id = message.chat.id
    bot.send_message(tg_id, '–°—ã–≥—Ä–∞–µ–º?', reply_markup=new_game_markup())


def new_game_markup():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—ä–µ–∫—Ç Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã"""
    markup_reply = types.ReplyKeyboardMarkup(resize_keyboard=True,
                                             one_time_keyboard=False,
                                             input_field_placeholder=g.rif)
    towns_ru = types.KeyboardButton('–ì–æ—Ä–æ–¥–∞ üá∑üá∫')
    towns_world = types.KeyboardButton('–ì–æ—Ä–æ–¥–∞ üåé')
    markup_reply.add(towns_ru, towns_world)
    return markup_reply


@bot.message_handler(commands=['help', 'h'])
def show_help(message):
    bot.send_message(message.chat.id, g.help_message, parse_mode='Markdown')


@bot.message_handler(commands=['info'])
def show_info(message):
    bot.send_message(message.chat.id, g.info_message, parse_mode='Markdown')


@bot.message_handler(commands=['rules', 'r'])
def show_rules(message):
    bot.send_message(message.chat.id, g.rules, parse_mode='Markdown')


@bot.message_handler(commands=['progress', 'p'])
def show_game_progress(message):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö–æ–¥–æ–º –∏–≥—Ä—ã"""
    used_towns = g.game_progress(message.chat.id)
    game_progress_message = ''
    for town in used_towns:
        game_progress_message += f'{town.title()}\n'
    bot.send_message(message.chat.id, f'–•–æ–¥ –∏–≥—Ä—ã: \n\n{game_progress_message}')


@bot.message_handler(regexp='–ì–æ—Ä–æ–¥–∞ üá∑üá∫')
def ru_mode(message):
    tg_id = message.chat.id
    with open(f'users/{tg_id}/used_towns.txt', 'w') as f:
        pass
    with open(f'users/{tg_id}/mode.txt', 'w') as f1:
        f1.write('ru')
    first_turn(tg_id, 'ru')


@bot.message_handler(regexp='–ì–æ—Ä–æ–¥–∞ üåé')
def world_mode(message):
    tg_id = message.chat.id
    with open(f'users/{tg_id}/used_towns.txt', 'w') as f:
        pass
    with open(f'users/{tg_id}/mode.txt', 'w') as f1:
        f1.write('world')
    first_turn(tg_id, 'world')


@bot.message_handler(content_types=['text'])
def human_turn(message):
    if g.check_mode(message.chat.id):
        input = message.text
        tg_id = message.chat.id
        human_validity(tg_id, input)


def first_turn(tg_id, mode):
    """–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä —Ç–æ–≥–æ, –∫–æ–º—É –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–µ—Ä–≤—ã–π —Ö–æ–¥"""
    if mode == 'ru':
        mode_name = '–ì–æ—Ä–æ–¥–∞ üá∑üá∫ (–†–§)'
    else:
        mode_name = '–ì–æ—Ä–æ–¥–∞ üåé (–ú–∏—Ä)'
    bot.send_message(tg_id, f'–ò–≥—Ä–∞–µ–º –≤ {mode_name}')

    r = random.randint(0, 1)
    if r == 0:
        bot.send_message(tg_id, '–Ø –ø–µ—Ä–≤—ã–π')
        bot_first_turn(tg_id)
    else:
        bot.send_message(tg_id, '–í—ã –ø–µ—Ä–≤—ã–π')


def need_letter_help(tg_id, town, bot=False):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –æ—à–∏–±–∫–∏ –≤ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ"""
    event_code = g.need_letter(town, tg_id)[-1]
    sample_message = errors['need_letter'][event_code]
    pronoun = '–í–∞–º'
    letter_end = '—É'

    if bot == True:
        pronoun = '–º–Ω–µ'

    if event_code == '0':
        need_letter = g.need_letter(town, tg_id)[0].upper()
        help_message = sample_message.format(need_letter)
        return help_message

    elif event_code == '1' or event_code == '2':
        need_letter = g.need_letter(town, tg_id)[0].upper()
        wrong_letters = g.need_letter(town, tg_id)[1]
        if len(wrong_letters) > 1:
            letter_end = '—ã'
        help_message = sample_message.format(pronoun, need_letter,
                                             letter_end, wrong_letters)
        return help_message

    elif event_code == '3':
        need_letter = g.need_letter(town, tg_id)[0].upper()
        no_dict_letters = g.need_letter(town, tg_id)[1]
        no_town_letters = g.need_letter(town, tg_id)[2]
        help_message = sample_message.format(pronoun, need_letter,
                                             no_dict_letters, no_town_letters)
        return help_message

    elif event_code == '4' or event_code == '5':
        no_dict_letters = g.need_letter(town, tg_id)[0]
        no_town_letters = g.need_letter(town, tg_id)[1]
        help_message = sample_message.format(no_dict_letters, no_town_letters)
        return help_message


def human_validity(tg_id, input):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ï—Å–ª–∏ –æ–Ω –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º
    (—Ç.–µ. –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≥–æ—Ä–æ–¥–æ–º, –∏–º–µ–µ—Ç —Å–ø–µ—Ü. —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ —Ü–∏—Ñ—Ä—ã,
    —è–≤–ª—è–µ—Ç—Å—è –Ω–∞–∑–≤–∞–Ω–Ω—ã–º –≥–æ—Ä–æ–¥–æ–º), ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å
    —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–π –æ—à–∏–±–∫–æ–π.
    """
    validity = g.validity(tg_id, input)

    if validity == True:
        g.add_town(input, tg_id)
        bot_turn(tg_id, input)

    elif validity == 'not_town':
        bot.send_message(tg_id, random.choice(errors['not_town']))

    elif validity in errors.keys():
        bot.send_message(tg_id, errors[validity], parse_mode='Markdown')

    elif validity == '0':
        last_town = g.usage_check(tg_id, town=input, last=True)
        help_message = need_letter_help(tg_id, last_town)
        bot.send_message(tg_id, help_message, parse_mode='Markdown')

    elif validity == '1' or validity == '2':
        last_town = g.usage_check(tg_id, town=input, last=True)
        help_message = need_letter_help(tg_id, last_town)
        bot.send_message(tg_id, help_message, parse_mode='Markdown')

    elif validity == '3':
        last_town = g.usage_check(tg_id, town=input, last=True)
        help_message = need_letter_help(tg_id, last_town)
        bot.send_message(tg_id, help_message, parse_mode='Markdown')

    elif validity == '4' or validity == '5':
        last_town = g.usage_check(tg_id, town=input, last=True)
        help_message = need_letter_help(tg_id, last_town)
        bot.send_message(tg_id, help_message, parse_mode='Markdown')


def bot_first_turn(tg_id):
    """–ü–µ—Ä–≤—ã–π —Ö–æ–¥ –±–æ—Ç–∞. –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤ —á–∞—Ç —Å–ª—É—á–∞–π–Ω—ã–π –≥–æ—Ä–æ–¥."""
    bot_town = g.rand_town(tg_id)
    g.add_town(bot_town, tg_id)
    town_link = g.get_link(tg_id, bot_town)
    bot.send_message(tg_id, f'<a href="{town_link}">{bot_town}</a>',
                     parse_mode='HTML', disable_web_page_preview=True)

    next_letter = g.need_letter(bot_town, tg_id)[0]
    if next_letter != bot_town[-1]:
        help_message = need_letter_help(tg_id, bot_town)
        bot.send_message(tg_id, help_message, parse_mode='Markdown')


def bot_try(tg_id, letter):
    """–ü–æ–ø—ã—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥–æ—Ä–æ–¥–∞ –±–æ—Ç–æ–º"""
    while True:
        bot_town = g.town_on_letter(tg_id, letter)

        if g.usage_check(tg_id, town=bot_town) == True:
            return bot_town


def bot_turn(tg_id, human_town):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –≥–æ—Ä–æ–¥ (–∏ —Å—Å—ã–ª–∫—É) –≤ —á–∞—Ç, –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–∞–∫–∞—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å.
    –ü—Ä–∏ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Å—Ü–µ–Ω–∞—Ä–∏—è—Ö –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    event_code = g.need_letter(human_town, tg_id)[-1]

    if event_code == '0':
        need_letter = g.need_letter(human_town, tg_id)[0]
        bot_town = bot_try(tg_id, need_letter)
        g.add_town(bot_town, tg_id)
        town_link = g.get_link(tg_id, bot_town)
        bot.send_message(tg_id, f'<a href="{town_link}">{bot_town}</a>',
                         parse_mode='HTML', disable_web_page_preview=True)

        next_letter = g.need_letter(bot_town, tg_id)[0]
        if next_letter != bot_town[-1]:
            help_message = need_letter_help(tg_id, bot_town)
            bot.send_message(tg_id, help_message, parse_mode='Markdown')

    elif event_code == '1' or event_code == '2':
        help_message = need_letter_help(tg_id, human_town, bot=True)
        bot.send_message(tg_id, help_message, parse_mode='Markdown')
        need_letter = g.need_letter(human_town, tg_id)[0]
        bot_town = bot_try(tg_id, need_letter)
        g.add_town(bot_town, tg_id)
        town_link = g.get_link(tg_id, bot_town)
        bot.send_message(tg_id, f'<a href="{town_link}">{bot_town}</a>',
                         parse_mode='HTML', disable_web_page_preview=True)

    elif event_code == '3':
        help_message = need_letter_help(tg_id, human_town, bot=True)
        bot.send_message(tg_id, help_message, parse_mode='Markdown')
        need_letter = g.need_letter(human_town, tg_id)[0]
        bot_town = bot_try(tg_id, need_letter)
        g.add_town(bot_town, tg_id)
        town_link = g.get_link(tg_id, bot_town)
        bot.send_message(tg_id, f'<a href="{town_link}">{bot_town}</a>',
                         parse_mode='HTML', disable_web_page_preview=True)

    elif event_code == '4' or event_code == '5':
        help_message = need_letter_help(tg_id, human_town, bot=True)
        bot.send_message(tg_id, help_message, parse_mode='Markdown')


bot.polling(none_stop=True)
